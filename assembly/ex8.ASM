.386
.model   flat,stdcall
option   casemap:none

WinMain  proto :DWORD,:DWORD,:DWORD,:DWORD
WndProc  proto :DWORD,:DWORD,:DWORD,:DWORD
Display  proto :DWORD
AVERAGE  PROTO

include      ex8.INC

include      windows.inc
include      user32.inc
include      kernel32.inc
include      gdi32.inc
include      shell32.inc

includelib   user32.lib
includelib   kernel32.lib
includelib   gdi32.lib
includelib   shell32.lib

student	     struct
	     myname   db  10 dup(0)
	     chinese  db  0
	     math     db  0
	     english  db  0
	     average  db  0
	     grade    db  0
student      ends

.data
ClassName    db       'TryWinClass',0
AppName      db       'Our First Window',0
MenuName     db       'MyMenu',0
DlgName	     db       'MyDialog',0
AboutMsg     db       '我是CS1409许荣仁',0
hInstance    dd       0
CommandLine  dd       0   
buf	 	 student  <'Jin',96,64,97,0,0>
	     student  <'Zhang',56,89,68,0,0>
	     student  <'Lisi',77,79,68,0,0>
	     student  <'Wangwu',68,93,68,0,0>
	     student  <'Xurr',96,75,87,0,0>
msg_name     db       'name',0
msg_chinese  db       'chinese',0
msg_math     db       'math',0
msg_english  db       'english',0
msg_average  db       'average',0
msg_grade    db       'grade',0
numtostr	 db		  0,0,0
TEMP DB 0;F2T10数字转字符要用
CHU100 DB 100;100作除数
CHU10 DB 10;10作除数
BNB DB 7;求平均成绩时除以7要用
.code
Start:	     invoke GetModuleHandle,NULL
	     mov    hInstance,eax
	     invoke GetCommandLine
	     mov    CommandLine,eax
	     invoke WinMain,hInstance,NULL,CommandLine,SW_SHOWDEFAULT
	     invoke ExitProcess,eax
	     ;;
WinMain      proc   hInst:DWORD,hPrevInst:DWORD,CmdLine:DWORD,CmdShow:DWORD
	     LOCAL  wc:WNDCLASSEX
	     LOCAL  msg:MSG
	     LOCAL  hWnd:HWND
             invoke RtlZeroMemory,addr wc,sizeof wc
	     mov    wc.cbSize,SIZEOF WNDCLASSEX
	     mov    wc.style, CS_HREDRAW or CS_VREDRAW
	     mov    wc.lpfnWndProc, offset WndProc
	     mov    wc.cbClsExtra,NULL
	     mov    wc.cbWndExtra,NULL
	     push   hInst
	     pop    wc.hInstance
	     mov    wc.hbrBackground,COLOR_WINDOW+1
	     mov    wc.lpszMenuName, offset MenuName
	     mov    wc.lpszClassName,offset ClassName
	     invoke LoadIcon,NULL,IDI_APPLICATION
	     mov    wc.hIcon,eax
	     mov    wc.hIconSm,0
	     invoke LoadCursor,NULL,IDC_ARROW
	     mov    wc.hCursor,eax
	     invoke RegisterClassEx, addr wc
	     INVOKE CreateWindowEx,NULL,addr ClassName,addr AppName,\
                    WS_OVERLAPPEDWINDOW,CW_USEDEFAULT,\
                    CW_USEDEFAULT,CW_USEDEFAULT,CW_USEDEFAULT,NULL,NULL,\
                    hInst,NULL
	     mov    hWnd,eax
	     INVOKE ShowWindow,hWnd,SW_SHOWNORMAL
	     INVOKE UpdateWindow,hWnd
	     ;;
MsgLoop:     INVOKE GetMessage,addr msg,NULL,0,0
             cmp    EAX,0
             je     ExitLoop
             INVOKE TranslateMessage,addr msg
             INVOKE DispatchMessage,addr msg
	     jmp    MsgLoop 
ExitLoop:    mov    eax,msg.wParam
	     ret
WinMain      endp

WndProc      proc   hWnd:DWORD,uMsg:DWORD,wParam:DWORD,lParam:DWORD
	     LOCAL  hdc:HDC
		 LOCAL	ps:PAINTSTRUCT
		 LOCAL	rect:RECT
     .IF     uMsg == WM_DESTROY
	     invoke PostQuitMessage,NULL
     .ELSEIF uMsg == WM_KEYDOWN
	    .IF     wParam == VK_F1
             invoke MessageBox,hWnd,addr AboutMsg,addr AppName,0;;your code
	    .ENDIF
     .ELSEIF uMsg == WM_COMMAND
	    .IF     wParam == IDM_FILE_EXIT
		    invoke SendMessage,hWnd,WM_CLOSE,0,0
	    .ELSEIF wParam == IDM_ACTION_LIST
		    invoke Display,hWnd
	    .ELSEIF wParam == IDM_HELP_ABOUT
		    invoke MessageBox,hWnd,addr AboutMsg,addr AppName,0
		.ELSEIF wParam == IDM_ACTION_AVERAGE
			invoke AVERAGE
	    .ENDIF 
     .ELSEIF uMsg == WM_PAINT
			invoke BeginPaint,hWnd,ADDR ps
			mov hdc,eax
			invoke GetClientRect,hWnd,ADDR rect
			invoke Display,hWnd
			invoke EndPaint,hWnd,ADDR ps
			;;redraw window again
     .ELSE
             invoke DefWindowProc,hWnd,uMsg,wParam,lParam
             ret
     .ENDIF
  	     xor    eax,eax
	     ret
WndProc      endp

Display      proc   hWnd:DWORD
             XX     equ  10
             YY     equ  10
	     	 XX_GAP equ  100
	     	 YY_GAP equ  30
             LOCAL  hdc:HDC
             invoke GetDC,hWnd
             mov    hdc,eax
             invoke TextOut,hdc,XX+0*XX_GAP,YY+0*YY_GAP,offset msg_name,4
             invoke TextOut,hdc,XX+1*XX_GAP,YY+0*YY_GAP,offset msg_chinese,7
             invoke TextOut,hdc,XX+2*XX_GAP,YY+0*YY_GAP,offset msg_math,4
             invoke TextOut,hdc,XX+3*XX_GAP,YY+0*YY_GAP,offset msg_english,7
             invoke TextOut,hdc,XX+4*XX_GAP,YY+0*YY_GAP,offset msg_average,7
             invoke TextOut,hdc,XX+5*XX_GAP,YY+0*YY_GAP,offset msg_grade,5
             ;;
			 
             invoke TextOut,hdc,XX+0*XX_GAP,YY+1*YY_GAP,offset buf.myname,3;第一个学生
             xor bx,bx
             mov bl,buf.chinese
             call F2T10
             invoke TextOut,hdc,XX+1*XX_GAP,YY+1*YY_GAP,offset numtostr,3
             xor bx,bx
             mov bl,buf.math
             call F2T10
             invoke TextOut,hdc,XX+2*XX_GAP,YY+1*YY_GAP,offset numtostr,3
             xor bx,bx
             mov bl,buf.english
             call F2T10
             invoke TextOut,hdc,XX+3*XX_GAP,YY+1*YY_GAP,offset numtostr,3
             xor bx,bx
             mov bl,buf.average
             call F2T10
             invoke TextOut,hdc,XX+4*XX_GAP,YY+1*YY_GAP,offset numtostr,3
             invoke TextOut,hdc,XX+5*XX_GAP,YY+1*YY_GAP,offset buf.grade,1
 			 
             invoke TextOut,hdc,XX+0*XX_GAP,YY+2*YY_GAP,offset buf[1*15].myname,5;第二个学生
             xor bx,bx
             mov bl,buf[1*15].chinese
             call F2T10
             invoke TextOut,hdc,XX+1*XX_GAP,YY+2*YY_GAP,offset numtostr,3
             xor bx,bx
             mov bl,buf[1*15].math
             call F2T10
             invoke TextOut,hdc,XX+2*XX_GAP,YY+2*YY_GAP,offset numtostr,3
             xor bx,bx
             mov bl,buf[1*15].english
             call F2T10
             invoke TextOut,hdc,XX+3*XX_GAP,YY+2*YY_GAP,offset numtostr,3
             xor bx,bx
             mov bl,buf[1*15].average
             call F2T10
             invoke TextOut,hdc,XX+4*XX_GAP,YY+2*YY_GAP,offset numtostr,3
             invoke TextOut,hdc,XX+5*XX_GAP,YY+2*YY_GAP,offset buf[1*15].grade,1
   			 
             invoke TextOut,hdc,XX+0*XX_GAP,YY+3*YY_GAP,offset buf[2*15].myname,4;第三个学生
             xor bx,bx
             mov bl,buf[2*15].chinese
             call F2T10
             invoke TextOut,hdc,XX+1*XX_GAP,YY+3*YY_GAP,offset numtostr,3
             xor bx,bx
             mov bl,buf[2*15].math
             call F2T10
             invoke TextOut,hdc,XX+2*XX_GAP,YY+3*YY_GAP,offset numtostr,3
             xor bx,bx
             mov bl,buf[2*15].english
             call F2T10
             invoke TextOut,hdc,XX+3*XX_GAP,YY+3*YY_GAP,offset numtostr,3
             xor bx,bx
             mov bl,buf[2*15].average
             call F2T10
             invoke TextOut,hdc,XX+4*XX_GAP,YY+3*YY_GAP,offset numtostr,3
             invoke TextOut,hdc,XX+5*XX_GAP,YY+3*YY_GAP,offset buf[2*15].grade,1
   			 
             invoke TextOut,hdc,XX+0*XX_GAP,YY+4*YY_GAP,offset buf[3*15].myname,4;第四个学生
             xor bx,bx
             mov bl,buf[3*15].chinese
             call F2T10
             invoke TextOut,hdc,XX+1*XX_GAP,YY+4*YY_GAP,offset numtostr,3
             xor bx,bx
             mov bl,buf[3*15].math
             call F2T10
             invoke TextOut,hdc,XX+2*XX_GAP,YY+4*YY_GAP,offset numtostr,3
             xor bx,bx
             mov bl,buf[3*15].english
             call F2T10
             invoke TextOut,hdc,XX+3*XX_GAP,YY+4*YY_GAP,offset numtostr,3
             xor bx,bx
             mov bl,buf[3*15].average
             call F2T10
             invoke TextOut,hdc,XX+4*XX_GAP,YY+4*YY_GAP,offset numtostr,3
             invoke TextOut,hdc,XX+5*XX_GAP,YY+4*YY_GAP,offset buf[3*15].grade,1
  			 
             invoke TextOut,hdc,XX+0*XX_GAP,YY+5*YY_GAP,offset buf[4*15].myname,4;第五个学生
             xor bx,bx
             mov bl,buf[4*15].chinese
             call F2T10
             invoke TextOut,hdc,XX+1*XX_GAP,YY+5*YY_GAP,offset numtostr,3
             xor bx,bx
             mov bl,buf[4*15].math
             call F2T10
             invoke TextOut,hdc,XX+2*XX_GAP,YY+5*YY_GAP,offset numtostr,3
             xor bx,bx
             mov bl,buf[4*15].english
             call F2T10
             invoke TextOut,hdc,XX+3*XX_GAP,YY+5*YY_GAP,offset numtostr,3
             xor bx,bx
             mov bl,buf[4*15].average
             call F2T10
             invoke TextOut,hdc,XX+4*XX_GAP,YY+5*YY_GAP,offset numtostr,3
             invoke TextOut,hdc,XX+5*XX_GAP,YY+5*YY_GAP,offset buf[4*15].grade,1

 			 ret
Display      endp

;功能：字节型数字转为十进制字符串并保存到numtostr中
;入口参数：字节型数字--BX
;出口参数：无
F2T10 PROC FAR
	PUSH ESI
	PUSH EDI
	PUSH AX
	PUSH DX
	MOV AX,BX
	DIV CHU100
	MOV TEMP,AL
	XCHG AL,AH
	ADD TEMP,'0'
	MOV DL,TEMP
	MOV numtostr,DL
	MOV AH,0
	DIV CHU10
	MOV TEMP,AL
	XCHG AL,AH
	ADD TEMP,'0'
	MOV DL,TEMP
	MOV numtostr+1,DL
	MOV TEMP,AL
	ADD TEMP,'0'
	MOV DL,TEMP
	MOV numtostr+2,DL
	POP DX
	POP AX
	POP EDI
	POP ESI
	RET
F2T10 ENDP

;功能2计算平均分
;入口参数：无
;出口参数：无
AVERAGE PROC 
	PUSH EAX
	PUSH EDX
	PUSH ESI
	PUSH ECX
	LEA ESI,buf
	MOV ECX,5
	XOR EAX,EAX
GNT:
	MOV AL,BYTE PTR 10[ESI]
	SAL EAX,2
	XOR EDX,EDX
	MOV DL,BYTE PTR 11[ESI]
	SAL EDX,1
	ADD EDX,EAX
	XOR EAX,EAX
	MOV AL,BYTE PTR 12[ESI]
	ADD EAX,EDX
	XOR EDX,EDX
	DIV BNB
	MOV 13[ESI],AL
		CMP AL,90
		JNS PUTA
		CMP AL,80
		JNS PUTB
		CMP AL,70
		JNS PUTC
		CMP AL,60
		JNS PUTD
		JMP PUTE
PUTA:
		MOV BYTE PTR 14[ESI],'A'
		JMP INPUT
PUTB:
		MOV BYTE PTR 14[ESI],'B'
		JMP INPUT
PUTC:
		MOV 14[ESI],BYTE PTR 'C'
		JMP INPUT
PUTD:
		MOV 14[ESI],BYTE PTR 'D'
		JMP INPUT
PUTE:
		MOV 14[ESI],BYTE PTR 'E'
INPUT:
	ADD ESI,15
	XOR EAX,EAX
	DEC CX
	JNZ GNT	
	POP ECX
	POP ESI
	POP EDX
	POP EAX
	RET
AVERAGE ENDP

          end  Start
