#ifndef TREE_H_INCLUDED
#define TREE_H_INCLUDED

# include<stdio.h>
# include<stdlib.h>
# include<string.h>
# include<stdarg.h>//变长参数函数所需的头文件
extern int yylineno;//行号
extern char* yytext;//词
/*抽象语法树的结点*/
struct ast
{
    int line; //行号
    char* name;//语法单元的名字
    int tag;//1为变量，2为函数，3为常数,4为数组，5为结构体,6为形参
    struct ast *l;//左孩子
    struct ast *r;//右孩子
    char* content;//语法单元语义值
    char* type;//语法单元语义类型
    float value;//保存int和float型数据的值
    char* scope;
};

/*构造抽象语法树,变长参数，name:语法单元名字；num:变长参数中语法结点个数*/
struct ast *newast(char* name,int num,...);

/*遍历抽象语法树，level为树的层数*/
void eval(struct ast*,int level);

/*变量符号表链表*/
struct var{
    char* scope;//作用域    
    char* name;//变量名
    char* type;//变量类型
    struct var* next;
}*varhead,*vartail;
/*函数符号表链表*/
struct func{
    int tag;//标志是否定义
    char* name;//函数名
    char* type;//函数类型
    char* rtype;//实际返回值类型
    int paramnum;//形参个数
    struct func* next;
}*funchead,*functail;
/* 形参符号表链表*/
struct paramvar{
    char* scope;//作用域    
    char* name;//变量名
    char* type;//变量类型
    struct paramvar* next;
}*paramvarhead,*paramvartail;
/*数组符号表链表*/
struct array{
    char* scope;//作用域
    char* name;//数组名
    char* type;//数组类型
    int size;//数组大小
    struct array* next;
}*arrayhead,*arraytail;
/*结构体符号表链表*/
struct struc{
    char* name;//结构体名
    char* type;//结构体类型
    struct struc* next;
}*struchead,*structail;

/*建立变量符号表*/
void newvar(int num,...);
/*查找变量是否定义，1表示已经定义，0表示未定义*/
int is_var_define(struct ast* temp);
/*查找变量的类型*/
char* var_type(struct ast* temp);
/*建立变量作用域*/
void scopevar(char* name);
/*查找变量的作用域*/
char* var_scope(struct ast* temp);

/*建立函数符号表*/
void newfunc(int num,...);
/*查找函数是否定义，1表示已经定义，0表示未定义*/
int is_func_define(struct ast* temp);
/*查找函数的类型*/
char* func_type(struct ast* temp);
/*查找函数的形参个数*/
int func_formalnum(struct ast* temp);
/*建立形参变量符号表*/
void newparamvar(int num,...);
/*查找函数是否定义，1表示已经定义，0表示未定义*/
int is_paramvar_define(struct ast* temp);
/*建立形参变量作用域*/
void scopeparamvar(char* name);

/*建立数组符号表*/
void newarray(int num,...);
/*查找数组是否定义，1表示已经定义，0表示未定义*/
int is_array_define(struct ast* temp);
/*查找数组的类型*/
char* array_type(struct ast* temp);
/*建立数组大小*/
void add_array_size(struct ast* temp,int dx);

void scopearray(char* name);
/*建立结构体符号表*/
void newstruc(int num,...);
/*查找结构体是否定义，1表示已经定义，0表示未定义*/
int is_struc_define(struct ast* temp);
/*查找结构体的类型*/
char* struc_type(struct ast* temp);


//查找重定义
int is_vardefine(struct var* head);

int is_arraydefine(struct array* head);



#endif
